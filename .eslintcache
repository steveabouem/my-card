[{"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\index.tsx":"1","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\reportWebVitals.js":"2","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\App.tsx":"3","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\PageContainer.tsx":"4","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\Footer.tsx":"5","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\Work\\Work.tsx":"6","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\Bio\\Bio.tsx":"7","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\Contact\\Contact.tsx":"8","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\Landing\\LandingPage.tsx":"9","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\Sidebar.tsx":"10","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\index.ts":"11","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\UTILS\\locale\\index.ts":"12","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\styles.ts":"13","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\styles.ts":"14","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\icons.ts":"15","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\SectionTitle.tsx":"16","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\API\\repositories\\testData\\workItems.ts":"17","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\Navigation.tsx":"18"},{"size":297,"mtime":1615255578292,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":1452,"mtime":1615666457932,"results":"22","hashOfConfig":"20"},{"size":892,"mtime":1608688902740,"results":"23","hashOfConfig":"20"},{"size":480,"mtime":1612636269049,"results":"24","hashOfConfig":"20"},{"size":4383,"mtime":1615666494274,"results":"25","hashOfConfig":"20"},{"size":1299,"mtime":1614736175618,"results":"26","hashOfConfig":"20"},{"size":4902,"mtime":1615252413433,"results":"27","hashOfConfig":"20"},{"size":815,"mtime":1613926507815,"results":"28","hashOfConfig":"20"},{"size":5215,"mtime":1615666509888,"results":"29","hashOfConfig":"20"},{"size":116,"mtime":1606789765636,"results":"30","hashOfConfig":"20"},{"size":195,"mtime":1615665868725,"results":"31","hashOfConfig":"20"},{"size":2469,"mtime":1615666192799,"results":"32","hashOfConfig":"20"},{"size":9662,"mtime":1614737388256,"results":"33","hashOfConfig":"20"},{"size":1353,"mtime":1612707702535,"results":"34","hashOfConfig":"20"},{"size":652,"mtime":1614737346599,"results":"35","hashOfConfig":"20"},{"size":1502,"mtime":1613014955570,"results":"36","hashOfConfig":"20"},{"size":826,"mtime":1614737054965,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9h3fe0",{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\index.tsx",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\reportWebVitals.js",["81","82"],"const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\App.tsx",["83"],"import React from 'react';\r\nimport PageContainer from './COMPONENTS/common/PageContainer';\r\nimport Sidebar, { SectionsEnum } from './COMPONENTS/common/Sidebar';\r\nimport Footer from './COMPONENTS/common/Footer';\r\nimport { StyledPageContent } from './COMPONENTS/common';\r\nimport LandingPage from './COMPONENTS/Landing/LandingPage';\r\nimport Contact from './COMPONENTS/Contact/Contact';\r\nimport Bio from './COMPONENTS/Bio/Bio';\r\nimport Work from './COMPONENTS/Work/Work';\r\nimport { FR } from './UTILS/locale';\r\nimport Lang from 'lang.js';\r\n\r\ndeclare global {\r\n  interface Window { lang: any; }\r\n}\r\n\r\nexport enum LocalesEnum {\r\n  EN = 'en',\r\n  FR = 'fr_ca'\r\n}\r\n\r\nconst lang = new Lang({\r\n  messages: FR,\r\n    locale: LocalesEnum.EN,\r\n  fallback: LocalesEnum.FR\r\n});\r\n\r\nconsole.log({ test: lang.get('landing.greetings')});\r\nwindow.lang = lang;\r\n\r\nconst AppLayout = ():JSX.Element => {\r\n  return (\r\n    <>\r\n      <Sidebar />\r\n      <PageContainer >\r\n        <StyledPageContent id={SectionsEnum.HOME}>\r\n          <LandingPage />\r\n        </StyledPageContent>\r\n        <StyledPageContent id={SectionsEnum.BIO}>\r\n          <Bio />\r\n        </StyledPageContent>\r\n        <StyledPageContent id={SectionsEnum.CONTACT}>\r\n          <Contact />\r\n        </StyledPageContent>\r\n        <StyledPageContent id={SectionsEnum.WORK}>\r\n          <Work />\r\n        </StyledPageContent>\r\n        <Footer />\r\n      </PageContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppLayout;","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\PageContainer.tsx",["84","85"],"import React, { useState } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\n\r\ninterface IPageContainerProps {\r\n  callback?: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst StyledContainer = styled(Container)`\r\n  margin-top: 70px;\r\n  padding: 20px;\r\n`;\r\n\r\nconst PageContainer = ({ callback, children }: IPageContainerProps): JSX.Element => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const handleLoaderState = () => {\r\n    if (!callback) {\r\n      return;\r\n    }\r\n\r\n    callback();\r\n  };\r\n  \r\n  return (\r\n    <StyledContainer fluid>\r\n      {loading\r\n        && <PacmanLoader\r\n          loading={loading}\r\n          color=\"white\"\r\n          size={200}\r\n        />\r\n      }\r\n      {children}\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nexport default PageContainer;","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\Footer.tsx",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\Work\\Work.tsx",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\Bio\\Bio.tsx",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\Contact\\Contact.tsx",["86"],"import React from 'react';\r\nimport { Formik, useFormikContext } from 'formik';\r\nimport * as Yup from 'yup'; \r\nimport { BounceLoader } from 'react-spinners';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n  StyledButtonOverlay, \r\n  StyledField, StyledFormWrapper,\r\n  StyledInvalidMessage,\r\n  StyledLabel,\r\n  StyledLoaderWrap\r\n} from '../styles';\r\nimport { icons } from '../common';\r\nimport SectionTitle from '../common/SectionTitle';\r\nimport { useInView } from 'react-intersection-observer';\r\n\r\ninterface IContactFieldProps {\r\n  name: string;\r\n  customClass?: string;\r\n  type?: string;\r\n}\r\n\r\nconst ContactSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Must be a valid address.')\r\n    .required('Required'),\r\n  name: Yup.string()\r\n    .min(4, '4 characters minimum.')\r\n    .max(16, '16 characters maximum.')\r\n    .required('Required'),\r\n  message: Yup.string()\r\n    .min(20, '20 characters minimum.')\r\n    .max(200, '200 characters maximum.')\r\n});\r\n\r\n\r\nconst Contact = (): JSX.Element => {\r\n  // TODO: should I add a way to make the form about either REVIEW or Request? exp: \"reason\" dropdown field, and a link in page description that sets the dropdown to the value they want\r\n  // if you add this, then restore the Testimonials page\r\n  const { ref, inView } = useInView();\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      {inView && <SectionTitle title=\"Reach Out!\" isInview={inView} />}\r\n      <div className=\"pb-2\">Looking to work on a project together,need a website for your business, to promote a product or event?</div>\r\n      <div className=\"pb-2\">Hit me up below and I'd be happy to reply to any inquiries you have.</div>\r\n      <div className=\"pb-2\">Please note that <b>I DO NOT</b> participate in, or  provide consulting services for product/project development.</div>\r\n      <Formik\r\n        initialValues={{ email: '', name: '', message: '' }}\r\n        validationSchema={ContactSchema}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          setTimeout(() => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          submitForm,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting,\r\n          isValid\r\n        }) => (\r\n        <StyledFormWrapper>\r\n          {isSubmitting && (\r\n            <StyledLoaderWrap>\r\n              <BounceLoader\r\n                size={150}\r\n                css={`\r\n                  opacity: .5;\r\n                `}\r\n                color=\"#0e155a\"\r\n                loading\r\n              />\r\n            </StyledLoaderWrap>\r\n          )}\r\n          <form onSubmit={handleSubmit} className=\"d-flex flex-column\">\r\n            <ContactField type=\"email\" name=\"email\" />\r\n            <ContactField type=\"name\" name=\"name\" />\r\n            <div className=\"d-flex flex-column w-100\">\r\n              {errors.message && touched.message && (\r\n                <StyledInvalidMessage className=\"invalid-message\">\r\n                  <FontAwesomeIcon icon={icons.danger.static} />\r\n                  {errors.message}\r\n                </StyledInvalidMessage>\r\n              )}\r\n              <StyledLabel>MESSAGE</StyledLabel>\r\n              <StyledField\r\n                name=\"message\"\r\n                as=\"textarea\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={'message' + (errors.message && touched.message ? ' invalid' : '')}\r\n              />\r\n            </div>\r\n            <StyledButtonOverlay \r\n              className={`d-flex flex-column position-relative ${!isValid ? ' invalid' : ''}`}\r\n              onClick={submitForm}\r\n            >\r\n              <div className=\"static\">\r\n                <div className=\"top\">Submit</div>\r\n              </div>\r\n              <div className=\"hovered\">\r\n                <div className=\"top\">Submit</div>\r\n              </div>\r\n            </StyledButtonOverlay>\r\n          </form>\r\n        </StyledFormWrapper>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst ContactField = ({name, customClass, type}: IContactFieldProps) => {\r\n  const {touched, errors, handleChange, handleBlur}: any = useFormikContext();\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column w-100\">\r\n      { errors[name] && touched[name] && (\r\n        <StyledInvalidMessage className=\"invalid-message\">\r\n          <FontAwesomeIcon icon={icons.danger.static} />\r\n          {errors[name]}\r\n        </StyledInvalidMessage>\r\n      )}\r\n      <StyledLabel>{name.toUpperCase()}</StyledLabel>\r\n      <StyledField\r\n        type={type}\r\n        name={name}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        className={customClass + (errors[name] && touched[name] ? ' invalid' : '')}\r\n      />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Contact;","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\Landing\\LandingPage.tsx",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\Sidebar.tsx",["87","88","89","90"],"import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { StyledIconLink, StyledIconLinkOverlay, StyledLandingIconsColumn, StyledIconLinkName, StyledSidebarSticker } from '../styles';\r\nimport { IIconStates } from '../types';\r\nimport { icons } from './icons';\r\nimport { LocalesEnum } from '../../App';\r\nimport styled from 'styled-components';\r\n\r\ninterface IIconLinkWrapProps {\r\n  color: string;\r\n  iconStates: IIconStates;\r\n  name: string;\r\n  active: boolean;\r\n  isParentActive: boolean;\r\n  handleClick: (id: string) => void;\r\n}\r\n\r\nexport enum  SectionsEnum {\r\n  HOME = 'HOME',\r\n  BIO = 'BIO',\r\n  CONTACT = 'CONTACT',\r\n  WORK = 'WORK',\r\n}\r\n\r\nconst StyledLocaleButton = styled.div<{visible: boolean}>`\r\n  opacity: ${({visible}) => visible? 1 : 0};\r\n  text-alaign: center;\r\n  height: 40px;\r\n  width: 40px;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Sidebar = ():JSX.Element => {\r\n  const [activeSections, setActiveSections] = useState<SectionsEnum>(SectionsEnum.HOME);\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const [stickerOut, setStickerOut] = useState<boolean>(false);\r\n\r\n  const lang = window.lang;\r\n  const currentLang = lang.locale === LocalesEnum.EN ? 'EN' : 'FR';\r\n\r\n  const isActive = (id: SectionsEnum) => activeSections === id;\r\n\r\n  const handleSectionIconClick = (id: SectionsEnum) => {\r\n    const target = document.getElementById(id as string);\r\n\r\n    target?.scrollIntoView({behavior: 'smooth'});\r\n    setActiveSections(id);\r\n  };\r\n\r\n  const handleLanguageChange = () => {\r\n    window.lang.setLocale(lang.locale === LocalesEnum.EN ? LocalesEnum.FR : LocalesEnum.EN);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledSidebarSticker \r\n        isSidebarExpanded={expanded}\r\n        isSelfExpanded={stickerOut}\r\n        onClick={() => setExpanded(!expanded)}\r\n        onMouseEnter={() => setStickerOut(true)}\r\n        onMouseLeave={() => setStickerOut(false)}\r\n      >\r\n        <FontAwesomeIcon icon={icons.expand.static} rotate={stickerOut ? 180 : 0} />\r\n      </StyledSidebarSticker>\r\n      <StyledLandingIconsColumn className=\"d-flex flex-column\" expanded={expanded}>\r\n        <IconLinkWrap\r\n          handleClick={() => handleSectionIconClick(SectionsEnum.HOME)}\r\n          active={isActive(SectionsEnum.HOME)}\r\n          isParentActive={expanded}\r\n          iconStates={icons.home}\r\n          name={SectionsEnum.HOME}\r\n          color=\"dark\"\r\n        />\r\n        <IconLinkWrap\r\n          handleClick={() => handleSectionIconClick(SectionsEnum.BIO)}\r\n          active={isActive(SectionsEnum.BIO)}\r\n          isParentActive={expanded}\r\n          iconStates={icons.profile}\r\n          name={SectionsEnum.BIO}\r\n          color=\"dark\"\r\n        />\r\n        <IconLinkWrap\r\n          handleClick={() => handleSectionIconClick(SectionsEnum.CONTACT)}\r\n          active={isActive(SectionsEnum.CONTACT)}\r\n          isParentActive={expanded}\r\n          iconStates={icons.mail}\r\n          name={SectionsEnum.CONTACT}\r\n          color=\"dark\"\r\n        />\r\n        <IconLinkWrap\r\n          handleClick={() => handleSectionIconClick(SectionsEnum.WORK)}\r\n          active={isActive(SectionsEnum.WORK)}\r\n          isParentActive={expanded}\r\n          iconStates={icons.work}\r\n          name={SectionsEnum.WORK}\r\n          color=\"dark\"\r\n        />\r\n        {/* TODO: consider whether testimonials are relevant on their own, under the given 'work' section, or at all */}\r\n        {/* IF I add the dropdown in Contact, then this is automatically relevant */}\r\n        {/* <IconLinkWrap\r\n          handleClick={()=> handleSectionIconClick()}\r\n          active={isActive('/testimonials')}\r\n          isParentActive={expanded}\r\n          iconStates={icons.testimonials}\r\n          name={SectionsEnum.FEEDBACK}\r\n          color=\"dark\"\r\n        /> */}\r\n        {/* TODO: ditto */}\r\n        {/* <IconLinkWrap\r\n          handleClick={()=> handleSectionIconClick()}\r\n          active={isActive('/budget')}\r\n          isParentActive={expanded}\r\n          iconStates={icons.budget}\r\n          name={SectionsEnum.BUDGET}\r\n          color=\"dark\"\r\n        /> */}\r\n          <StyledLocaleButton\r\n            visible={expanded}\r\n            onClick={handleLanguageChange}\r\n          >{lang.get('landing.greetings')}</StyledLocaleButton>\r\n      </StyledLandingIconsColumn>\r\n    </>\r\n  );\r\n};\r\n\r\nconst IconLinkWrap = ({ iconStates, color, name, active, handleClick, isParentActive }: IIconLinkWrapProps): JSX.Element => {\r\n  const [hovered, setHovered] = useState<boolean>(false);\r\n\r\n  return (\r\n    <StyledIconLink\r\n      active={active}\r\n      isParentActive={isParentActive}\r\n      className={color}\r\n      onMouseEnter={() => setHovered(true)}\r\n      onMouseLeave={() => setHovered(false)}\r\n      onClick={() => handleClick(name)}\r\n    >\r\n      <StyledIconLinkOverlay className={color}>\r\n        {hovered && (\r\n          <div className=\"d-flex\">\r\n            <StyledIconLinkName>{name}</StyledIconLinkName>\r\n          </div>\r\n        )}\r\n      </StyledIconLinkOverlay>\r\n      <FontAwesomeIcon icon={hovered || active ? iconStates?.hover : iconStates?.static} />\r\n    </StyledIconLink>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\index.ts",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\UTILS\\locale\\index.ts",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\styles.ts",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\styles.ts",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\icons.ts",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\SectionTitle.tsx",["91"],"import React, { useEffect, useState } from 'react';\r\nimport { StyledHeader, StyledHeaderText } from './styles';\r\n\r\ninterface ISectionTitleProps {\r\n  title: string;\r\n  isInview: boolean;\r\n}\r\n\r\nconst SectionTitle = ({ title, isInview }: ISectionTitleProps) => {\r\n  const [inView, setInView] = useState<boolean>(false);\r\n\r\n  setTimeout(() => {\r\n    setInView(true);\r\n  }, 300);\r\n\r\n  useEffect(() => {\r\n    if (!isInview) {\r\n      return;\r\n    }\r\n    \r\n  });\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <StyledHeaderText className={inView ? 'loaded' : ''}>{title.toUpperCase()}</StyledHeaderText>\r\n    </StyledHeader>\r\n  );\r\n};\r\n\r\nexport default SectionTitle;","C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\API\\repositories\\testData\\workItems.ts",[],"C:\\Users\\Admin\\Desktop\\WEB_DEV\\MY_SITE\\my-card\\src\\COMPONENTS\\common\\Navigation.tsx",["92","93","94"],"import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n// import { icons } from '../common';\r\n\r\ninterface IStyledTopNavbarProps {\r\n  hidden?: boolean;\r\n}\r\n\r\ninterface INavigationProps {\r\n  children?: React.ReactChild;\r\n}\r\n\r\nconst StyledTopNavbar = styled(Navbar)`\r\n  background: transparent;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  &&& {\r\n    color: white;\r\n  }\r\n  height: 70px;\r\n  &.fixed-top {\r\n    &&& {\r\n      z-index: 10;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Navigation = ({ children }: INavigationProps): JSX.Element => {\r\n  return (\r\n    <StyledTopNavbar fixed=\"top\">\r\n      Welcome\r\n    </StyledTopNavbar>\r\n  );\r\n};\r\n\r\nexport default Navigation;",{"ruleId":"95","severity":1,"message":"96","line":1,"column":25,"nodeType":"97","messageId":"98","endLine":1,"endColumn":39},{"ruleId":"95","severity":1,"message":"99","line":1,"column":25,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"103","line":14,"column":28,"nodeType":"104","messageId":"105","endLine":14,"endColumn":31,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":17,"column":19,"nodeType":"100","messageId":"109","endLine":17,"endColumn":29},{"ruleId":"107","severity":1,"message":"110","line":19,"column":9,"nodeType":"100","messageId":"109","endLine":19,"endColumn":26},{"ruleId":"102","severity":1,"message":"103","line":121,"column":54,"nodeType":"104","messageId":"105","endLine":121,"endColumn":57,"suggestions":"111"},{"ruleId":"107","severity":1,"message":"112","line":1,"column":17,"nodeType":"100","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"107","severity":1,"message":"113","line":1,"column":28,"nodeType":"100","messageId":"109","endLine":1,"endColumn":35},{"ruleId":"107","severity":1,"message":"114","line":1,"column":37,"nodeType":"100","messageId":"109","endLine":1,"endColumn":43},{"ruleId":"107","severity":1,"message":"115","line":40,"column":9,"nodeType":"100","messageId":"109","endLine":40,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":9,"column":22,"nodeType":"97","messageId":"98","endLine":9,"endColumn":66},{"ruleId":"107","severity":1,"message":"116","line":4,"column":10,"nodeType":"100","messageId":"109","endLine":4,"endColumn":19},{"ruleId":"107","severity":1,"message":"117","line":8,"column":11,"nodeType":"100","messageId":"109","endLine":8,"endColumn":32},{"ruleId":"107","severity":1,"message":"118","line":31,"column":23,"nodeType":"100","messageId":"109","endLine":31,"endColumn":31},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Argument 'onPerfEntry' should be typed.","Identifier","missingArgType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["119","120"],"@typescript-eslint/no-unused-vars","'setLoading' is assigned a value but never used.","unusedVar","'handleLoaderState' is assigned a value but never used.",["121","122"],"'useEffect' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'currentLang' is assigned a value but never used.","'useParams' is defined but never used.","'IStyledTopNavbarProps' is defined but never used.","'children' is defined but never used.",{"messageId":"123","fix":"124","desc":"125"},{"messageId":"126","fix":"127","desc":"128"},{"messageId":"123","fix":"129","desc":"125"},{"messageId":"126","fix":"130","desc":"128"},"suggestUnknown",{"range":"131","text":"132"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"131","text":"133"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"134","text":"132"},{"range":"134","text":"133"},[583,586],"unknown","never",[4262,4265]]